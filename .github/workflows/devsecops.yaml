name: Java CI/CD with Docker, SAST, DAST, SCA, push image

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  IMAGE_NAME: springcommunity/spring-petclinic
  TAG: latest

jobs:
  # 1️⃣ SAST
  sast:
    name: Static Code Analysis (Horusec)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Horusec SAST
        run: |
          docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v $(pwd):/src \
            horuszup/horusec-cli:v2.7 horusec start -p /src -P $(pwd) || true

          if [[ "$(docker logs $(docker ps -alq) | grep 'Vulnerability MEDIUM is. [1-9]\d*' | wc -l)" -gt 0 ]]; then
            echo "SAST: Medium or higher vulnerabilities found."
            exit 1
          else
            echo "SAST: No critical issues."
          fi

  # 2️⃣ Build image locally
  build_image:
    name: Build Docker Image (Local)
    runs-on: ubuntu-latest
    needs: sast

    outputs:
      image_digest: ${{ steps.build-and-save.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        id: build-and-save
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: ${{ env.IMAGE_NAME }}:${{ env.TAG }}

  # 3️⃣ DAST
  dast:
    name: Dynamic App Security Testing (DAST)
    runs-on: ubuntu-latest
    needs: build_image

    steps:
      - name: Run local container from built image
        run: docker run -d -p 8080:8080 --name app-test ${{ env.IMAGE_NAME }}:${{ env.TAG }}

      - name: Get container IP
        id: ip
        run: |
          container_ip=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' app-test)
          echo "container_ip=$container_ip" >> $GITHUB_OUTPUT

      - name: Run ZAP Baseline Scan
        run: |
          docker run -t --name zap owasp/zap2docker-stable zap-baseline.py -t http://${{ steps.ip.outputs.container_ip }}:8080 || true

          if [[ "$(docker logs zap | grep 'WARN-NEW. [1-9]\d*' | wc -l)" -gt 0 ]]; then
            echo "DAST: Security warnings found"
            exit 1
          else
            echo "DAST: No issues found"
          fi

  # 4️⃣ SCA
  sca:
    name: Software Composition Analysis (SCA)
    runs-on: ubuntu-latest
    needs: build_image

    env:
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Snyk SCA scan
        run: |
          docker run --rm --env SNYK_TOKEN -v $(pwd):/project snyk/snyk:docker snyk test --all-projects || true

          if [[ "$(docker logs $(docker ps -alq) | grep 'found [1-9]\d* issues' | wc -l)" -gt 0 ]]; then
            echo "SCA: Vulnerabilities found"
            exit 1
          else
            echo "SCA: Clean"
          fi

  # 5️⃣ Push image
  push_image:
    name: Push Docker Image
    runs-on: ubuntu-latest
    needs: [dast, sca]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE_NAME }}:${{ env.TAG }}
