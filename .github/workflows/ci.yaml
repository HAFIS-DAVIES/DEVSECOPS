name: APS Pipeline Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Install npm
        run: sudo apt-get update && sudo apt-get install -y npm

      - name: Build
        run: |
          echo "Compiling the code..."
          echo "Compile complete."
          npm install
      - name: Upload node_modules as artifact
        uses: actions/upload-artifact@v4
        with:
          name: node_modules
          path: node_modules

  unit-test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Unit Test
        run: |
          echo "Running unit tests... This will take about 60 seconds."
          echo "Code coverage is 90%"

  lint-test:
    name: Lint Test
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Lint
        run: |
          echo "Linting code... This will take about 10 seconds."
          echo "No lint issues found."

  dast:
    name: DAST Security Test
    runs-on: ubuntu-latest
    needs: [unit-test, lint-test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Start Juice Shop
        run: docker run -d -p 3000:3000 --name juice-shop bkimminich/juice-shop

      - name: Get container IP
        id: get_ip
        run: |
          container_ip=$(docker inspect -f "{{ .NetworkSettings.Networks.bridge.IPAddress }}" juice-shop)
          echo "container_ip=$container_ip" >> $GITHUB_OUTPUT

      - name: Run ZAP DAST scan
        run: |
          docker run -t --name dast owasp/dependency-check zap-baseline.py -t http://${{ steps.get_ip.outputs.container_ip }}:3000 || true
          docker logs dast > container-logs
          if [[ "$(grep 'WARN-NEW. [1-9]\d*' container-logs | wc -l)" -gt 0 ]]; then
            echo 'Failing job due to identified failures'
            exit 1
          else
            echo "no issues found"
          fi

  sast:
    name: SAST Security Test
    runs-on: ubuntu-latest
    needs: [unit-test, lint-test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Horusec SAST
        run: |
            docker run --name horusec -v /var/run/docker.sock:/var/run/docker.sock -v $(pwd):/src horuszup/horusec-cli:v2.7 horusec start -p /src -P $(pwd) || true
            docker logs horusec > container-logs
            if [[ "$(grep 'Vulnerability MEDIUM is. [1-9]\d*' container-logs | wc -l)" -gt 0 ]]; then
              echo 'Failing job due to identified failures'
              exit 1
            else
              echo "no issues found"
            fi

  sca:
    name: SCA Security Test
    runs-on: ubuntu-latest
    needs: [unit-test, lint-test]
    env:
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: npm install

      - name: Run Snyk SCA
        env:
            SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
            docker run --name sca -e SNYK_TOKEN=${{ secrets.SNYK_TOKEN }} -v $(pwd):/app snyk/snyk:node || true
            docker logs sca > container-logs
            if [[ "$(grep 'found [1-9]\d* issues' container-logs | wc -l)" -gt 0 ]]; then
              echo 'Failing job due to identified failures'
              exit 1
            else
              echo "no issues found"
            fi

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [dast, sast, sca]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy
        run: |
          echo "Deploying application..."
          echo "Application successfully deployed."
