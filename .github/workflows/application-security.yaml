name: Java CI/CD with SAST, DAST, SCA (Using Public Image)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  IMAGE_NAME: springcommunity/spring-petclinic
  TAG: latest

jobs:
  # 1Ô∏è‚É£ SAST
  sast:
    name: Static Code Analysis (Horusec)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Horusec SAST
        run: |
          docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v $(pwd):/src \
            horuszup/horusec-cli:v2.7 horusec start -p /src -P $(pwd) || true

          if [[ "$(docker logs $(docker ps -alq) | grep 'Vulnerability MEDIUM is. [1-9]\d*' | wc -l)" -gt 0 ]]; then
            echo "SAST: Medium or higher vulnerabilities found."
            exit 1
          else
            echo "SAST: No critical issues."
          fi

  # 2Ô∏è‚É£ DAST
  dast:
    name: Dynamic App Security Testing (DAST)
    runs-on: ubuntu-latest
    needs: sast

    steps:
      - name: Pull public PetClinic image
        run: docker pull ${{ env.IMAGE_NAME }}

      - name: Run PetClinic container
        run: docker run -d -p 8080:8080 --name app-test ${{ env.IMAGE_NAME }}

      - name: Wait for application to start
        run: |
          echo "‚è≥ Waiting for app to be healthy..."
          sleep 20

      - name: Run ZAP Baseline Scan
        run: |
          docker run --rm -t \
            --network host \
            owasp/zap2docker-stable zap-baseline.py -t http://127.0.0.1:8080 -r zap-report.html || true

          echo "Checking ZAP results..."
          if grep -q "FAIL-NEW:" zap-report.html; then
            echo "‚ùå DAST: High risk issues found."
            exit 1
          else
            echo "‚úÖ DAST: No high risk issues found."
          fi

      - name: Upload ZAP report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: zap-report
          path: zap-report.html

  # 3Ô∏è‚É£ SCA
  sca:
    name: Software Composition Analysis (SCA)
    runs-on: ubuntu-latest
    needs: sast

    env:
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Run Snyk SCA scan
        run: |
          echo "üîé Starting Snyk scan..."
          snyk test --all-projects --severity-threshold=medium
