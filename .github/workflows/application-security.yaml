name: Java CI/CD with SAST, DAST, SCA (Built Locally)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  IMAGE_NAME: petclinic-app
  TAG: latest

jobs:
  # 1Ô∏è‚É£ SAST
  sast:
    name: Static Code Analysis (Horusec)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PetClinic source
        uses: actions/checkout@v3
        with:
          repository: spring-projects/spring-petclinic

      - name: Run Horusec SAST (without Docker mode)
        run: |
          docker run --rm \
            -v "$(pwd):/src" \
            horuszup/horusec-cli:v2.7 horusec start -p /src -D -e=true
          echo "‚úÖ Horusec scan completed successfully."

  # 2Ô∏è‚É£ DAST
  dast:
    name: Dynamic App Security Testing (DAST)
    runs-on: ubuntu-latest
    #

    steps:
      - name: Checkout PetClinic source
        uses: actions/checkout@v3
        with:
          repository: spring-projects/spring-petclinic

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t ${{ env.IMAGE_NAME }} .

      - name: Run PetClinic container
        run: |
          docker run -d -p 8080:8080 --name app-test ${{ env.IMAGE_NAME }}
          echo "‚è≥ Waiting for app to be healthy..."
          sleep 20

      - name: Run ZAP Baseline Scan
        run: |
          docker run --rm -t --network host \
            owasp/zap2docker-stable zap-baseline.py -t http://127.0.0.1:8080 -r zap-report.html || true

          echo "Checking ZAP results..."
          if grep -q "FAIL-NEW:" zap-report.html; then
            echo "‚ùå DAST: High risk issues found."
            exit 1
          else
            echo "‚úÖ DAST: No high risk issues found."
          fi

      - name: Upload ZAP report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap-report.html


  sca:
    name: Software Composition Analysis (SCA)
    runs-on: ubuntu-latest
  #  needs: sast

    env:
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
  
      - name: Install Snyk CLI
        run: npm install -g snyk
  
      - name: Run Snyk SCA scan
        run: |
          echo "üîé Starting Snyk scan..."
          snyk test --severity-threshold=medium
